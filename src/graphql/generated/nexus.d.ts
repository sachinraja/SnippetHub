/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { Context } from "./../context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  SnippetInput: { // input type
    code: string; // String!
    name: string; // String!
  }
}

export interface NexusGenEnums {
  Language: "csharp" | "elixir" | "javascript" | "other" | "python" | "typescript"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Mutation: {};
  Pack: { // root type
    authorId: number; // Int!
    description: string; // String!
    id: number; // Int!
    language: NexusGenEnums['Language']; // Language!
    name: string; // String!
    upvotes: number; // Int!
  }
  Query: {};
  Snippet: { // root type
    code: string; // String!
    id: number; // Int!
    name: string; // String!
    packId: number; // Int!
  }
  User: { // root type
    bio?: string | null; // String
    id: number; // Int!
    username: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createPack: NexusGenRootTypes['Pack'] | null; // Pack
  }
  Pack: { // field return type
    author: NexusGenRootTypes['User']; // User!
    authorId: number; // Int!
    description: string; // String!
    id: number; // Int!
    language: NexusGenEnums['Language']; // Language!
    name: string; // String!
    snippets: NexusGenRootTypes['Snippet'][]; // [Snippet!]!
    upvotes: number; // Int!
  }
  Query: { // field return type
    userByUsername: NexusGenRootTypes['User'] | null; // User
  }
  Snippet: { // field return type
    code: string; // String!
    id: number; // Int!
    name: string; // String!
    pack: NexusGenRootTypes['Pack']; // Pack!
    packId: number; // Int!
  }
  User: { // field return type
    bio: string | null; // String
    id: number; // Int!
    packs: NexusGenRootTypes['Pack'][] | null; // [Pack!]
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    createPack: 'Pack'
  }
  Pack: { // field return type name
    author: 'User'
    authorId: 'Int'
    description: 'String'
    id: 'Int'
    language: 'Language'
    name: 'String'
    snippets: 'Snippet'
    upvotes: 'Int'
  }
  Query: { // field return type name
    userByUsername: 'User'
  }
  Snippet: { // field return type name
    code: 'String'
    id: 'Int'
    name: 'String'
    pack: 'Pack'
    packId: 'Int'
  }
  User: { // field return type name
    bio: 'String'
    id: 'Int'
    packs: 'Pack'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createPack: { // args
      description: string; // String!
      name: string; // String!
      snippets: NexusGenInputs['SnippetInput'][]; // [SnippetInput!]!
    }
  }
  Query: {
    userByUsername: { // args
      username: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}