generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Snippet {
  id        Int      @id @default(autoincrement())
  name      String   @db.Citext
  code      String
  language  Language @default(other)
  packId    Int      @map("pack_id")
  pack      Pack     @relation(fields: [packId], references: [id])
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  @@unique([name, packId])
  @@map("snippet")
}

model Pack {
  id               Int              @id @default(autoincrement())
  name             String           @db.Citext
  shortDescription String           @map("short_description")
  longDescription  String?          @map("long_description")
  language         Language         @default(other)
  upvotes          Int              @default(0)
  snippets         Snippet[]
  authorId         String           @map("author_id")
  author           User             @relation(fields: [authorId], references: [id])
  userPackUpvotes  UserPackUpvote[]
  createdAt        DateTime         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime         @updatedAt @map("updated_at") @db.Timestamptz

  @@unique([name, authorId])
  @@map("pack")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  username        String           @unique
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  bio             String?          @db.Text
  type            UserType         @default(user)
  packs           Pack[]
  accounts        Account[]
  userPackUpvotes UserPackUpvote[]
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime         @updatedAt @map("updated_at") @db.Timestamptz

  @@map("user")
}

enum Language {
  python
  javascript
  typescript
  csharp
  elixir
  html
  css
  other

  @@map("language")
}

enum UserType {
  user
  admin

  @@map("user_type")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String    @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
  @@map("account")
}

model UserPackUpvote {
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])
  packId Int    @map("pack_id")
  pack   Pack   @relation(fields: [packId], references: [id])

  @@id([userId, packId])
  @@map("user_pack_upvote")
}
